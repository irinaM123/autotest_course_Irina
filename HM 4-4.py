# Напишите функцию multiplication_chain, которая принимает положительное число num,
# и возвращает количество раз count_multy, которое вы должны перемножить цифры числа num и полученных произведений,
# пока не получите одну цифру.
# Например (Ввод --> Вывод) :
#
# 39 --> 3 (потому что 3*9 = 27, 2*7 = 14, 1*4 = 4, вот 4 одна цифра. Итого 3 итерации)
# 999 --> 4 (потому что 9*9*9 = 729, 7*2*9 = 126, 1*2*6 = 12, наконец 1*2 = 2, Итого 4 итерации)
# 4 --> 0 (4 уже одна цифра, а значит мы проделали 0 итераций)

def multiplication_chain(num):
    # введем доп переменные:
    # count_multy - кол-во итераций, сколько раз перемножали цифры числа num
    count_multy = 0
    # введем Список, элементы которого - цифры, из которых состоит num
    s_list_num = []
    # j - число, которое получается после перемножения цифр числа num
    j = 1
    # введем Список, элементы которого - цифры, из которых состоит j
    j_list = []
    # преобразуем num в строку и растащим элементы строки в элементы списка s_list_num, преобразуя их в числа
    v = str(num)
    for i in range(0, len(v), 1):
        s_list_num.append(int(v[i]))
    # если num < 10, то перемножать нечего, k = 0
    if num < 10:
        print("count_multy = ", count_multy)
    else:
        # пока длина списка, элементы которого составляют num, больше или равно 2
        while len(s_list_num) >= 2:
            for i in range(0, len(s_list_num), 1):
                j = j * s_list_num[i]
            # первая итерация умножения прошла, увеличиваем счетчик
            count_multy = count_multy + 1
            # преобразуем j в строку j_str и растащим элементы строки в элементы списка j_list
            j_stroka = str(j)
            for i in range(0, len(j_stroka), 1):
                j_list.append(int(j_stroka[i]))
            # теперь наш новый список, элементы которого надо перемножить, j_list. Присвоим его значение s_list_num
            s_list_num = j_list
            # сбросим значение j, чтобы можно было заново перемножать
            j = 1
            # обнулим список j_list, чтобы можно было заново заполнять его
            j_list = []
    print("count_multy = ", count_multy)
    return count_multy

# Ниже НИЧЕГО НЕ НАДО ИЗМЕНЯТЬ


data = [
    39, 4, 25, 999, 5050, 222333444
]

test_data = [
    3, 0, 2, 4, 1, 4
]


for i, d in enumerate(data):
    assert multiplication_chain(d) == test_data[i], f'С набором {d} есть ошибка, не проходит проверку'
    print(f'Тестовый набор {d} прошёл проверку')
print('Всё ок')


print('\n            Задание 4')
num = 222333444
# введем доп переменные:
# count_multy - кол-во итераций, сколько раз перемножали цифры числа num
count_multy = 0
# введем Список, элементы которого - цифры, из которых состоит num
s_list_num = []
# j - число, которое получается после перемножения цифр числа num
j = 1
# введем Список, элементы которого - цифры, из которых состоит j
j_list = []
# преобразуем num в строку и растащим элементы строки в элементы списка s_list_num, преобразуя их в числа
v = str(num)
for i in range(0, len(v), 1):
    s_list_num.append(int(v[i]))
# если num < 10, то перемножать нечего, k = 0
if num < 10:
    print("count_multy = ", count_multy)
else:
    # пока длина списка, элементы которого составляют num, больше или равно 2
    while len(s_list_num) >= 2:
        for i in range(0, len(s_list_num), 1):
            j = j * s_list_num[i]
        # первая итерация умножения прошла, увеличиваем счетчик
        count_multy = count_multy + 1
        # преобразуем j в строку j_str и растащим элементы строки в элементы списка j_list
        j_stroka = str(j)
        for i in range(0, len(j_stroka), 1):
            j_list.append(int(j_stroka[i]))
        # теперь наш новый список, элементы которого надо перемножить, j_list. Присвоим его значение s_list_num
        s_list_num = j_list
        # сбросим значение j, чтобы можно было заново перемножать
        j = 1
        # обнулим список j_list, чтобы можно было заново заполнять его
        j_list = []
print("count_multy = ", count_multy)

